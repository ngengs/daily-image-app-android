jacoco {
    toolVersion = "0.8.8"
}

project.afterEvaluate { project ->
    setupAndroidReporting()
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def unitTestName = "${sourceName.capitalize()}UnitTest"
            def testTaskName = "test${unitTestName}"
            def jacocoTaskName = "jacoco${sourceName.capitalize()}TestCoverage"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
//            task "$jacocoTaskName"(type: JacocoReport, dependsOn: ["create${sourceName.capitalize()}CoverageReport", "$testTaskName"]) {
            task "$jacocoTaskName"(type: JacocoReport, dependsOn: ["$testTaskName"]) {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                        // glide
                        '**/GeneratedAppGlideModuleImpl.*',
                        '**/GeneratedRequestManagerFactory.*',
                        '**/GlideOptions.*',
                        '**/GlideRequest.*',
                        '**/GlideRequests.*',
                        '**/GlideApp.*',
                        // hilt
                        '**/*Hilt*.*',
                        '**/hilt_aggregated_deps/**',
                        '**/dagger/hilt/internal/aggregatedroot/codegen/**',
                        '**/*Dagger*.*',
                        // room
                        '**/*Dao_*.*',
                        '**/*Database_*.*',
                        // view binding
                        '**/databinding/*Binding.*',
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files(
                        [javaTree],
                        [kotlinTree],
                )
                executionData.from = files(fileTree(dir: project.buildDir, includes: [
                        "outputs/code_coverage/${sourceName}AndroidTest/connected/**/coverage.ec",
                        "outputs/unit_test_code_coverage/${sourceName}UnitTest/${testTaskName}.exec",
                ]))
                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java",
                ]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    csv.enabled true // change if needed
                    xml.enabled true // change if needed
                    html.enabled true
                }
            }
        }
    }
}